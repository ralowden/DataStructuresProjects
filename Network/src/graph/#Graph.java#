/*  THIS IS THE GRAPH ADT.  NOTE: An id of a vertex is denoted by its location on the board by coordinate ij like below.
 * 
                 -----------------------------------------
                 |    | 10 | 20 | 30 | 40 | 50 | 60 |    |
                 -----------------------------------------
                 | 01 | 11 | 21 | 31 | 41 | 51 | 61 | 71 |
                 -----------------------------------------
                 | 02 | 12 | 22 | 32 | 42 | 52 | 62 | 72 |
                 -----------------------------------------
                 | 03 | 13 | 23 | 33 | 43 | 53 | 63 | 73 |
                 -----------------------------------------
                 | 04 | 14 | 24 | 34 | 44 | 54 | 64 | 74 |
                 -----------------------------------------
                 | 05 | 15 | 25 | 35 | 45 | 55 | 65 | 75 |
                 -----------------------------------------
                 | 06 | 16 | 26 | 36 | 46 | 56 | 66 | 76 |
                 -----------------------------------------
                 |    | 17 | 27 | 37 | 47 | 57 | 67 |    |
                 -----------------------------------------
 */

package graph;

import list.*;

public class Graph {
	
	private int size;    // number of vertices
	private EList adj; // contains a list of all edges incident on each vertex

	public Graph() {
		adj = new EList();
		size = adj.length();
	}
	private void updateSize() {
		size = adj.length();
	}
	/**
	 * @param v Vertex
	 * @return an iterable collection of the edges incident upon vertex v
	 */
	public EList incidentEdges(int id) {
		return adj.findVertex(id).getLinks();
	}
	/**
	 * Inserts a vertex into this graph.  If a vertex already exists do nothing.
	 * @param data the in which to be inserted
	 * @param index the index (ij) of the vertex inserted.
	 */
	public void insertVertex(int id, int color) {
		if (adj.findVertex(id) != null) {
			return;
		}
		adj.insertBack(new Vertex(id, color));
		this.updateSize();
	}
	/**
	 * 
	 * @param v index of Vertex v
	 * @param w index of Vertex w
	 * @return returns true if Vertex at index v and Vertex at index w are adjacent
	 */
	public boolean areAdjacent(int vid, int wid) {
		EList e = adj.findVertex(vid).getLinks();
		
		if (e == null) {
			return false;
		}
		
		Vertex found = e.findVertex(wid);
		
		if (found == null) {
			return false;
		}
		else return true;
		
	}
	/**
	 * Links two vertices with an edge.  An edge is represented by two vertices listed in their respective lists.
	 * @param vid the first vertex
	 * @param wid the second vertex
	 */
	public void insertEdge(int vid, int wid) {
		Vertex e = adj.findVertex(vid);
		Vertex f = adj.findVertex(wid);
		
		if (e != null && f != null) {
			e.getLinks().insertBack(f);
			f.getLinks().insertBack(e);
		}
	}
	/**
	 * Removes a vertex from this graph.  If the vertex does not resist, this method does nothing.
	 * @param id the id of the vertex to be removed.
	 */
	public void removeVertex(int id) {
		
		Vertex e = adj.findVertex(id);
		
		// first remove links to this vertex in the graph.  Then remove links to that vertex.
		if (e != null) {
			while (e.getLinks().length() != 0) {
				DListNode d = e.getLinks().front();
				this.removeEdge(e.id(), ((Vertex) d.item).id());
			}
		}
		// finally remove the Vertex and update the size.
		adj.removeVertex(e);
		this.updateSize();
	}
	
	public void removeEdge(int vid, int wid) {
		Vertex e = adj.findVertex(vid);
		Vertex f = adj.findVertex(wid);
		
		if (e != null && f != null) {
			e.getLinks().removeVertex(f);
			f.getLinks().removeVertex(e);
		}
	}
	/**
	 * If an Vertex with a vertex of id ## exists, then return it, otherwise return null
	 * @param id the id of the Vertex you wish to look for
	 * @return the Vertex found
	 */
	public Vertex findPiece(int id) {
		Vertex e = adj.findVertex(id);
		return (e == null) ? null : e;
	}

	@Override
	public String toString() {
		return adj.printDeep();
	}

    public String prettyPrint() {
	String ans = "---------------------------------";
	for (int i = 0; i < 8; i++) {
	    ans = ans + "\n| ";
	    for (int j = 0; j < 8; j++) {
		Vertex found = findPiece(i + (10 * j));
		if (found != null) {
                    if (found.color() == 1) {
		      ans = ans + "B" + " | ";
                    } else {
			ans = ans + "W" + " | ";
		    }
                } else {
		    ans = ans + "  | ";
		} 
	    }
	    ans = ans + "\n---------------------------------";
	}
	return ans;
    }

    public void dfs(Vertex v){		
        v.visit();
        System.out.println(v);
        for(DListNode d : v.getLinks()){
            if(((Vertex) d.item).visited() == false){
            	dfs((Vertex) d.item);
            }
        }
    }


   public static void main(String[] args) {
	Graph board = new Graph();
        System.out.println(board.prettyPrint());

    }

 


}